---
description: 
globs: *.py, *.sh
alwaysApply: true
---
### MANDATORY PROJECT RULES

#### Environment Management

- ALWAYS use `pipenv` for dependency management and Python command execution
- ALL commands must be run from project root (where Pipfile exists)
- Never use `pip` directly - always use `pipenv install` or `pipenv run`

#### Database Migrations

- Use `./tools/db_update_schema.sh` to create new Alembic migrations (auto-generates based on model changes)
- Use `./tools/db_apply_head_schema.sh` to apply migrations to database
- Always check if model imports in `src/db/alembic/env.py` are up to date before running `db_update_schema.sh`

#### Development Workflow

- Use `./tools/run_dev.sh` for development server (includes hot reload, verbose logging, dev API key)
- Use `./tools/run_tests.sh` for running `pytest` (handles `.env` setup automatically)
- Use `./tools/run_lint.sh` for code quality checks with `ruff`
- Use `./tools/run_prod.sh` for production runs

#### Code Quality

- Always run linting before commits: `./tools/run_lint.sh`
- If user wants, use `pipenv run ruff check --fix` to auto-fix linting issues
- All scripts handle environment setup automatically (PYTHONPATH, .env files)

#### Project Structure

- All scripts are in `tools/` directory and use common `messages.sh` for colored output
- Scripts validate project root location and fail safely if run from wrong directory
- Version is managed through `.version` file in project root
- You can see other rules in `.cursor` directory, if you need those rules
- You can see the CI/CD pipeline in `.github/workflows` directory
